diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..710a2af
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,13 @@
+{
+  "css.validate": false,
+  "less.validate": false,
+  "scss.validate": false,
+  "css.lint.unknownAtRules": "ignore",
+  "tailwindCSS.emmetCompletions": true,
+  "files.associations": {
+    "*.css": "tailwindcss"
+  },
+  "editor.quickSuggestions": {
+    "strings": true
+  }
+}
\ No newline at end of file
diff --git a/src/app/admin/stores/components/StoreDialog.tsx b/src/app/admin/stores/components/StoreDialog.tsx
new file mode 100644
index 0000000..47cf4b3
--- /dev/null
+++ b/src/app/admin/stores/components/StoreDialog.tsx
@@ -0,0 +1,404 @@
+// src/app/admin/stores/components/StoreDialog.tsx
+'use client';
+
+import { useState, useEffect } from 'react';
+import { Loader2 } from 'lucide-react';
+import {
+  Dialog,
+  DialogContent,
+  DialogDescription,
+  DialogHeader,
+  DialogTitle,
+} from '@/components/ui/dialog';
+import { Button } from '@/components/ui/button';
+import { Input } from '@/components/ui/input';
+import { Label } from '@/components/ui/label';
+import {
+  Select,
+  SelectContent,
+  SelectItem,
+  SelectTrigger,
+  SelectValue,
+} from '@/components/ui/select';
+import api from '@/lib/api';
+import type { Store } from '@/types';
+
+interface StoreDialogProps {
+  store: Store | null;
+  isOpen: boolean;
+  onClose: () => void;
+  onSave: () => void;
+  isCreating: boolean;
+}
+
+export function StoreDialog({
+  store,
+  isOpen,
+  onClose,
+  onSave,
+  isCreating,
+}: StoreDialogProps) {
+  const [formData, setFormData] = useState({
+    storeId: '',
+    storeName: '',
+    address: '',
+    city: '',
+    state: '',
+    zipCode: '',
+    phone: '',
+    contactName: '',
+    contactPhone: '',
+    feePercentage: 5,
+    status: 'active' as string,
+  });
+  const [saving, setSaving] = useState(false);
+  const [error, setError] = useState('');
+
+  // US States
+  const states = [
+    'AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA',
+    'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD',
+    'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ',
+    'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC',
+    'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'
+  ];
+
+  useEffect(() => {
+    if (store) {
+      setFormData({
+        storeId: store.storeId || '',
+        storeName: store.storeName || '',
+        address: store.address || '',
+        city: store.city || '',
+        state: store.state || '',
+        zipCode: store.zipCode || '',
+        phone: store.phone || '',
+        contactName: store.contactName || '',
+        contactPhone: store.contactPhone || '',
+        feePercentage: store.feePercentage || 5,
+        status: store.status || 'active',
+      });
+    } else {
+      setFormData({
+        storeId: '',
+        storeName: '',
+        address: '',
+        city: '',
+        state: '',
+        zipCode: '',
+        phone: '',
+        contactName: '',
+        contactPhone: '',
+        feePercentage: 5,
+        status: 'active',
+      });
+    }
+    setError('');
+  }, [store, isOpen]);
+
+  const handleChange = (field: string, value: any) => {
+    setFormData((prev) => ({ ...prev, [field]: value }));
+    setError('');
+  };
+
+  const generateStoreId = () => {
+    const city = formData.city.toLowerCase().replace(/[^a-z0-9]/g, '');
+    const name = formData.storeName.toLowerCase().replace(/[^a-z0-9]/g, '').substring(0, 10);
+    const random = Math.random().toString(36).substring(2, 6);
+    return `store_${city}_${name}_${random}`;
+  };
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    setError('');
+
+    // Validation
+    if (!formData.storeName) {
+      setError('Store name is required');
+      return;
+    }
+
+    if (!formData.city || !formData.state) {
+      setError('City and state are required');
+      return;
+    }
+
+    if (formData.feePercentage < 0 || formData.feePercentage > 100) {
+      setError('Fee percentage must be between 0 and 100');
+      return;
+    }
+
+    try {
+      setSaving(true);
+
+      if (isCreating) {
+        // Generate storeId if not provided
+        const storeId = formData.storeId || generateStoreId();
+
+        await api.post('/api/admin/stores/create', {
+          storeId,
+          storeName: formData.storeName,
+          address: formData.address,
+          city: formData.city,
+          state: formData.state,
+          zipCode: formData.zipCode,
+          phone: formData.phone,
+          contactName: formData.contactName,
+          contactPhone: formData.contactPhone,
+          feePercentage: formData.feePercentage,
+          status: formData.status,
+        });
+      } else {
+        // Update existing store
+        await api.put(`/api/admin/stores/${store?.storeId}`, {
+          storeName: formData.storeName,
+          address: formData.address,
+          city: formData.city,
+          state: formData.state,
+          zipCode: formData.zipCode,
+          phone: formData.phone,
+          contactName: formData.contactName,
+          contactPhone: formData.contactPhone,
+          feePercentage: formData.feePercentage,
+          status: formData.status,
+        });
+      }
+
+      onSave();
+    } catch (err: any) {
+      console.error('Save store error:', err);
+      setError(
+        err.response?.data?.error || `Failed to ${isCreating ? 'create' : 'update'} store`
+      );
+    } finally {
+      setSaving(false);
+    }
+  };
+
+  return (
+    <Dialog open={isOpen} onOpenChange={onClose}>
+      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
+        <DialogHeader>
+          <DialogTitle>
+            {isCreating ? 'Add New Venue' : 'Edit Venue'}
+          </DialogTitle>
+          <DialogDescription>
+            {isCreating
+              ? 'Add a new venue location to the system'
+              : 'Update venue information and settings'}
+          </DialogDescription>
+        </DialogHeader>
+
+        <form onSubmit={handleSubmit} className="space-y-6">
+          {/* Error Message */}
+          {error && (
+            <div className="bg-red-500/10 border border-red-500/20 rounded-lg p-3 text-red-400 text-sm">
+              {error}
+            </div>
+          )}
+
+          {/* Basic Information */}
+          <div className="space-y-4">
+            <h3 className="font-medium">Basic Information</h3>
+
+            {isCreating && (
+              <div className="space-y-2">
+                <Label htmlFor="storeId">
+                  Store ID (Optional - auto-generated if empty)
+                </Label>
+                <Input
+                  id="storeId"
+                  value={formData.storeId}
+                  onChange={(e) => handleChange('storeId', e.target.value)}
+                  placeholder="store_cityname_venuename_xxxx"
+                  className="font-mono"
+                />
+                <p className="text-xs text-gray-400">
+                  Leave empty to auto-generate based on venue name
+                </p>
+              </div>
+            )}
+
+            <div className="space-y-2">
+              <Label htmlFor="storeName">
+                Venue Name <span className="text-red-400">*</span>
+              </Label>
+              <Input
+                id="storeName"
+                value={formData.storeName}
+                onChange={(e) => handleChange('storeName', e.target.value)}
+                placeholder="Gallatin Nimbus"
+                required
+              />
+            </div>
+
+            <div className="space-y-2">
+              <Label htmlFor="address">Street Address</Label>
+              <Input
+                id="address"
+                value={formData.address}
+                onChange={(e) => handleChange('address', e.target.value)}
+                placeholder="123 Main Street"
+              />
+            </div>
+
+            <div className="grid grid-cols-2 gap-4">
+              <div className="space-y-2">
+                <Label htmlFor="city">
+                  City <span className="text-red-400">*</span>
+                </Label>
+                <Input
+                  id="city"
+                  value={formData.city}
+                  onChange={(e) => handleChange('city', e.target.value)}
+                  placeholder="Nashville"
+                  required
+                />
+              </div>
+
+              <div className="space-y-2">
+                <Label htmlFor="state">
+                  State <span className="text-red-400">*</span>
+                </Label>
+                <Select
+                  value={formData.state}
+                  onValueChange={(value) => handleChange('state', value)}
+                >
+                  <SelectTrigger>
+                    <SelectValue placeholder="Select state" />
+                  </SelectTrigger>
+                  <SelectContent>
+                    {states.map((state) => (
+                      <SelectItem key={state} value={state}>
+                        {state}
+                      </SelectItem>
+                    ))}
+                  </SelectContent>
+                </Select>
+              </div>
+            </div>
+
+            <div className="grid grid-cols-2 gap-4">
+              <div className="space-y-2">
+                <Label htmlFor="zipCode">ZIP Code</Label>
+                <Input
+                  id="zipCode"
+                  value={formData.zipCode}
+                  onChange={(e) => handleChange('zipCode', e.target.value)}
+                  placeholder="37201"
+                  maxLength={10}
+                />
+              </div>
+
+              <div className="space-y-2">
+                <Label htmlFor="phone">Venue Phone</Label>
+                <Input
+                  id="phone"
+                  type="tel"
+                  value={formData.phone}
+                  onChange={(e) => handleChange('phone', e.target.value)}
+                  placeholder="(615) 555-1234"
+                />
+              </div>
+            </div>
+          </div>
+
+          {/* Contact Information */}
+          <div className="space-y-4">
+            <h3 className="font-medium">Contact Information</h3>
+
+            <div className="space-y-2">
+              <Label htmlFor="contactName">Contact Name</Label>
+              <Input
+                id="contactName"
+                value={formData.contactName}
+                onChange={(e) => handleChange('contactName', e.target.value)}
+                placeholder="John Doe"
+              />
+            </div>
+
+            <div className="space-y-2">
+              <Label htmlFor="contactPhone">Contact Phone</Label>
+              <Input
+                id="contactPhone"
+                type="tel"
+                value={formData.contactPhone}
+                onChange={(e) => handleChange('contactPhone', e.target.value)}
+                placeholder="(615) 555-5678"
+              />
+            </div>
+          </div>
+
+          {/* Settings */}
+          <div className="space-y-4">
+            <h3 className="font-medium">Settings</h3>
+
+            <div className="grid grid-cols-2 gap-4">
+              <div className="space-y-2">
+                <Label htmlFor="feePercentage">
+                  Fee Percentage <span className="text-red-400">*</span>
+                </Label>
+                <Input
+                  id="feePercentage"
+                  type="number"
+                  min="0"
+                  max="100"
+                  step="0.1"
+                  value={formData.feePercentage}
+                  onChange={(e) =>
+                    handleChange('feePercentage', parseFloat(e.target.value))
+                  }
+                  required
+                />
+                <p className="text-xs text-gray-400">
+                  Default is 5% - Gambino's cut of net revenue
+                </p>
+              </div>
+
+              <div className="space-y-2">
+                <Label htmlFor="status">
+                  Status <span className="text-red-400">*</span>
+                </Label>
+                <Select
+                  value={formData.status}
+                  onValueChange={(value) => handleChange('status', value)}
+                >
+                  <SelectTrigger>
+                    <SelectValue />
+                  </SelectTrigger>
+                  <SelectContent>
+                    <SelectItem value="active">Active</SelectItem>
+                    <SelectItem value="inactive">Inactive</SelectItem>
+                    <SelectItem value="pending">Pending Setup</SelectItem>
+                  </SelectContent>
+                </Select>
+              </div>
+            </div>
+          </div>
+
+          {/* Actions */}
+          <div className="flex items-center justify-end gap-3 pt-4 border-t border-gray-700">
+            <Button
+              type="button"
+              variant="outline"
+              onClick={onClose}
+              disabled={saving}
+            >
+              Cancel
+            </Button>
+            <Button type="submit" disabled={saving}>
+              {saving ? (
+                <>
+                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
+                  Saving...
+                </>
+              ) : (
+                <>{isCreating ? 'Create Venue' : 'Save Changes'}</>
+              )}
+            </Button>
+          </div>
+        </form>
+      </DialogContent>
+    </Dialog>
+  );
+}
\ No newline at end of file
diff --git a/src/app/admin/stores/page.tsx b/src/app/admin/stores/page.tsx
new file mode 100644
index 0000000..8580bb5
--- /dev/null
+++ b/src/app/admin/stores/page.tsx
@@ -0,0 +1,414 @@
+// src/app/admin/stores/page.tsx
+'use client';
+
+import { useState, useEffect } from 'react';
+import { 
+  Plus, 
+  Search, 
+  MapPin, 
+  Phone, 
+  Mail,
+  MoreVertical,
+  Edit2,
+  Trash2,
+  Eye,
+  TrendingUp,
+  DollarSign,
+  Activity
+} from 'lucide-react';
+import { Button } from '@/components/ui/button';
+import { Input } from '@/components/ui/input';
+import {
+  Select,
+  SelectContent,
+  SelectItem,
+  SelectTrigger,
+  SelectValue,
+} from '@/components/ui/select';
+import {
+  DropdownMenu,
+  DropdownMenuContent,
+  DropdownMenuItem,
+  DropdownMenuTrigger,
+} from '@/components/ui/dropdown-menu';
+import api from '@/lib/api';
+import type { Store } from '@/types';
+import { StoreDialog } from './components/StoreDialog';
+
+export default function StoresPage() {
+  const [stores, setStores] = useState<Store[]>([]);
+  const [filteredStores, setFilteredStores] = useState<Store[]>([]);
+  const [loading, setLoading] = useState(true);
+  const [searchQuery, setSearchQuery] = useState('');
+  const [statusFilter, setStatusFilter] = useState<string>('all');
+  const [stateFilter, setStateFilter] = useState<string>('all');
+
+  // Dialog state
+  const [dialogOpen, setDialogOpen] = useState(false);
+  const [selectedStore, setSelectedStore] = useState<Store | null>(null);
+  const [isCreating, setIsCreating] = useState(false);
+
+  // Fetch stores
+  const fetchStores = async () => {
+    try {
+      setLoading(true);
+      const response = await api.get('/api/admin/stores');
+      setStores(response.data.stores || []);
+      setFilteredStores(response.data.stores || []);
+    } catch (error) {
+      console.error('Failed to fetch stores:', error);
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  useEffect(() => {
+    fetchStores();
+  }, []);
+
+  // Filter stores
+  useEffect(() => {
+    let result = [...stores];
+
+    // Search filter
+    if (searchQuery) {
+      const query = searchQuery.toLowerCase();
+      result = result.filter(
+        (store) =>
+          store.storeName?.toLowerCase().includes(query) ||
+          store.city?.toLowerCase().includes(query) ||
+          store.state?.toLowerCase().includes(query) ||
+          store.storeId?.toLowerCase().includes(query)
+      );
+    }
+
+    // Status filter
+    if (statusFilter !== 'all') {
+      result = result.filter((store) => store.status === statusFilter);
+    }
+
+    // State filter
+    if (stateFilter !== 'all') {
+      result = result.filter((store) => store.state === stateFilter);
+    }
+
+    setFilteredStores(result);
+  }, [searchQuery, statusFilter, stateFilter, stores]);
+
+  // Get unique states - filter out undefined/null values
+  const uniqueStates = Array.from(
+    new Set(stores.map((store) => store.state).filter((state): state is string => !!state))
+  ).sort();
+
+  // Open create dialog
+  const handleCreate = () => {
+    setSelectedStore(null);
+    setIsCreating(true);
+    setDialogOpen(true);
+  };
+
+  // Open edit dialog
+  const handleEdit = (store: Store) => {
+    setSelectedStore(store);
+    setIsCreating(false);
+    setDialogOpen(true);
+  };
+
+  // Handle delete
+  const handleDelete = async (storeId: string) => {
+    if (!confirm('Are you sure you want to delete this venue?')) return;
+
+    try {
+      await api.delete(`/api/admin/stores/${storeId}`);
+      fetchStores();
+    } catch (error) {
+      console.error('Failed to delete store:', error);
+      alert('Failed to delete venue. It may have associated machines.');
+    }
+  };
+
+  // Close dialog and refresh
+  const handleDialogClose = () => {
+    setDialogOpen(false);
+    setSelectedStore(null);
+  };
+
+  const handleSave = () => {
+    setDialogOpen(false);
+    setSelectedStore(null);
+    fetchStores();
+  };
+
+  // Get status badge
+  const getStatusBadge = (status: string) => {
+    const styles = {
+      active: 'bg-green-500/10 text-green-400 border-green-500/20',
+      inactive: 'bg-gray-500/10 text-gray-400 border-gray-500/20',
+      pending: 'bg-yellow-500/10 text-yellow-400 border-yellow-500/20',
+    };
+
+    return (
+      <span
+        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${
+          styles[status as keyof typeof styles] || styles.inactive
+        }`}
+      >
+        {status.charAt(0).toUpperCase() + status.slice(1)}
+      </span>
+    );
+  };
+
+  // Stats
+  const stats = {
+    total: stores.length,
+    active: stores.filter((s) => s.status === 'active').length,
+    inactive: stores.filter((s) => s.status === 'inactive').length,
+    pending: stores.filter((s) => s.status === 'pending').length,
+  };
+
+  return (
+    <div className="p-6 space-y-6">
+      {/* Header */}
+      <div className="flex items-center justify-between">
+        <div>
+          <h1 className="text-3xl font-bold">Venues</h1>
+          <p className="text-gray-400 mt-1">
+            Manage venue locations and settings
+          </p>
+        </div>
+        <Button onClick={handleCreate}>
+          <Plus className="w-4 h-4 mr-2" />
+          Add Venue
+        </Button>
+      </div>
+
+      {/* Stats Cards */}
+      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
+        <div className="bg-gray-800/50 border border-gray-700 rounded-lg p-4">
+          <div className="flex items-center justify-between">
+            <div>
+              <p className="text-sm text-gray-400">Total Venues</p>
+              <p className="text-2xl font-bold mt-1">{stats.total}</p>
+            </div>
+            <div className="w-12 h-12 bg-blue-500/10 rounded-lg flex items-center justify-center">
+              <MapPin className="w-6 h-6 text-blue-400" />
+            </div>
+          </div>
+        </div>
+
+        <div className="bg-gray-800/50 border border-gray-700 rounded-lg p-4">
+          <div className="flex items-center justify-between">
+            <div>
+              <p className="text-sm text-gray-400">Active</p>
+              <p className="text-2xl font-bold mt-1 text-green-400">
+                {stats.active}
+              </p>
+            </div>
+            <div className="w-12 h-12 bg-green-500/10 rounded-lg flex items-center justify-center">
+              <Activity className="w-6 h-6 text-green-400" />
+            </div>
+          </div>
+        </div>
+
+        <div className="bg-gray-800/50 border border-gray-700 rounded-lg p-4">
+          <div className="flex items-center justify-between">
+            <div>
+              <p className="text-sm text-gray-400">Pending</p>
+              <p className="text-2xl font-bold mt-1 text-yellow-400">
+                {stats.pending}
+              </p>
+            </div>
+            <div className="w-12 h-12 bg-yellow-500/10 rounded-lg flex items-center justify-center">
+              <TrendingUp className="w-6 h-6 text-yellow-400" />
+            </div>
+          </div>
+        </div>
+
+        <div className="bg-gray-800/50 border border-gray-700 rounded-lg p-4">
+          <div className="flex items-center justify-between">
+            <div>
+              <p className="text-sm text-gray-400">Inactive</p>
+              <p className="text-2xl font-bold mt-1 text-gray-400">
+                {stats.inactive}
+              </p>
+            </div>
+            <div className="w-12 h-12 bg-gray-500/10 rounded-lg flex items-center justify-center">
+              <DollarSign className="w-6 h-6 text-gray-400" />
+            </div>
+          </div>
+        </div>
+      </div>
+
+      {/* Filters */}
+      <div className="bg-gray-800/50 border border-gray-700 rounded-lg p-4">
+        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
+          <div className="md:col-span-2">
+            <div className="relative">
+              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
+              <Input
+                placeholder="Search venues..."
+                value={searchQuery}
+                onChange={(e) => setSearchQuery(e.target.value)}
+                className="pl-10"
+              />
+            </div>
+          </div>
+
+          <Select value={statusFilter} onValueChange={setStatusFilter}>
+            <SelectTrigger>
+              <SelectValue placeholder="Filter by status" />
+            </SelectTrigger>
+            <SelectContent>
+              <SelectItem value="all">All Statuses</SelectItem>
+              <SelectItem value="active">Active</SelectItem>
+              <SelectItem value="inactive">Inactive</SelectItem>
+              <SelectItem value="pending">Pending</SelectItem>
+            </SelectContent>
+          </Select>
+
+          <Select value={stateFilter} onValueChange={setStateFilter}>
+            <SelectTrigger>
+              <SelectValue placeholder="Filter by state" />
+            </SelectTrigger>
+                              <SelectContent>
+                    <SelectItem value="all">All States</SelectItem>
+                    {uniqueStates.map((state) => (
+                      <SelectItem key={state} value={state}>
+                        {state}
+                      </SelectItem>
+                    ))}
+                  </SelectContent>
+          </Select>
+        </div>
+      </div>
+
+      {/* Stores Table */}
+      <div className="bg-gray-800/50 border border-gray-700 rounded-lg overflow-hidden">
+        {loading ? (
+          <div className="p-12 text-center text-gray-400">
+            Loading venues...
+          </div>
+        ) : filteredStores.length === 0 ? (
+          <div className="p-12 text-center text-gray-400">
+            No venues found
+          </div>
+        ) : (
+          <div className="overflow-x-auto">
+            <table className="w-full">
+              <thead className="bg-gray-900/50 border-b border-gray-700">
+                <tr>
+                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
+                    Venue
+                  </th>
+                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
+                    Location
+                  </th>
+                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
+                    Contact
+                  </th>
+                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
+                    Fee %
+                  </th>
+                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
+                    Status
+                  </th>
+                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-400 uppercase tracking-wider">
+                    Actions
+                  </th>
+                </tr>
+              </thead>
+              <tbody className="divide-y divide-gray-700">
+                {filteredStores.map((store) => (
+                  <tr
+                    key={store.storeId}
+                    className="hover:bg-gray-700/30 transition-colors"
+                  >
+                    <td className="px-6 py-4">
+                      <div>
+                        <div className="font-medium">{store.storeName}</div>
+                        <div className="text-sm text-gray-400 font-mono">
+                          {store.storeId}
+                        </div>
+                      </div>
+                    </td>
+                    <td className="px-6 py-4">
+                      <div className="flex items-start gap-2">
+                        <MapPin className="w-4 h-4 text-gray-400 mt-0.5 flex-shrink-0" />
+                        <div className="text-sm">
+                          {store.address && (
+                            <div className="text-gray-300">{store.address}</div>
+                          )}
+                          <div className="text-gray-400">
+                            {store.city}, {store.state} {store.zipCode}
+                          </div>
+                        </div>
+                      </div>
+                    </td>
+                    <td className="px-6 py-4">
+                      <div className="space-y-1 text-sm">
+                        {store.contactName && (
+                          <div className="text-gray-300">{store.contactName}</div>
+                        )}
+                        {store.contactPhone && (
+                          <div className="flex items-center gap-1 text-gray-400">
+                            <Phone className="w-3 h-3" />
+                            {store.contactPhone}
+                          </div>
+                        )}
+                        {!store.contactPhone && store.phone && (
+                          <div className="flex items-center gap-1 text-gray-400">
+                            <Phone className="w-3 h-3" />
+                            {store.phone}
+                          </div>
+                        )}
+                      </div>
+                    </td>
+                    <td className="px-6 py-4">
+                      <div className="text-sm font-medium">
+                        {(store.feePercentage ?? 5).toFixed(1)}%
+                      </div>
+                    </td>
+                    <td className="px-6 py-4">
+                      {getStatusBadge(store.status || 'active')}
+                    </td>
+                    <td className="px-6 py-4 text-right">
+                      <DropdownMenu>
+                        <DropdownMenuTrigger asChild>
+                          <Button variant="ghost" size="sm">
+                            <MoreVertical className="w-4 h-4" />
+                          </Button>
+                        </DropdownMenuTrigger>
+                        <DropdownMenuContent align="end">
+                          <DropdownMenuItem onClick={() => handleEdit(store)}>
+                            <Edit2 className="w-4 h-4 mr-2" />
+                            Edit
+                          </DropdownMenuItem>
+                          <DropdownMenuItem
+                            onClick={() => handleDelete(store.storeId)}
+                            className="text-red-400"
+                          >
+                            <Trash2 className="w-4 h-4 mr-2" />
+                            Delete
+                          </DropdownMenuItem>
+                        </DropdownMenuContent>
+                      </DropdownMenu>
+                    </td>
+                  </tr>
+                ))}
+              </tbody>
+            </table>
+          </div>
+        )}
+      </div>
+
+      {/* Store Dialog */}
+      <StoreDialog
+        store={selectedStore}
+        isOpen={dialogOpen}
+        onClose={handleDialogClose}
+        onSave={handleSave}
+        isCreating={isCreating}
+      />
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/src/app/admin/users/components/BulkActionsBar.tsx b/src/app/admin/users/components/BulkActionsBar.tsx
new file mode 100644
index 0000000..480735f
--- /dev/null
+++ b/src/app/admin/users/components/BulkActionsBar.tsx
@@ -0,0 +1,78 @@
+// src/app/admin/users/components/BulkActionsBar.tsx
+'use client';
+
+import { CheckCircle2, XCircle, Trash2, X } from 'lucide-react';
+import { Button } from '@/components/ui/button';
+import { Card } from '@/components/ui/card';
+
+interface BulkActionsBarProps {
+  selectedCount: number;
+  onAction: (action: 'activate' | 'deactivate' | 'delete') => void;
+  onClear: () => void;
+}
+
+export function BulkActionsBar({
+  selectedCount,
+  onAction,
+  onClear,
+}: BulkActionsBarProps) {
+  return (
+    <Card className="p-4 bg-blue-500/10 border-blue-500/20">
+      <div className="flex items-center justify-between">
+        <div className="flex items-center gap-4">
+          <div className="font-medium">
+            {selectedCount} user{selectedCount !== 1 ? 's' : ''} selected
+          </div>
+
+          <div className="h-6 w-px bg-gray-700" />
+
+          <div className="flex items-center gap-2">
+            <Button
+              size="sm"
+              variant="outline"
+              onClick={() => onAction('activate')}
+              className="gap-2"
+            >
+              <CheckCircle2 className="w-4 h-4" />
+              Activate
+            </Button>
+
+            <Button
+              size="sm"
+              variant="outline"
+              onClick={() => onAction('deactivate')}
+              className="gap-2"
+            >
+              <XCircle className="w-4 h-4" />
+              Deactivate
+            </Button>
+
+            <Button
+              size="sm"
+              variant="outline"
+              onClick={() => {
+                if (
+                  confirm(
+                    `Are you sure you want to delete ${selectedCount} user${
+                      selectedCount !== 1 ? 's' : ''
+                    }? This action cannot be undone.`
+                  )
+                ) {
+                  onAction('delete');
+                }
+              }}
+              className="gap-2 text-red-400 hover:text-red-300 hover:bg-red-500/10"
+            >
+              <Trash2 className="w-4 h-4" />
+              Delete
+            </Button>
+          </div>
+        </div>
+
+        <Button size="sm" variant="ghost" onClick={onClear}>
+          <X className="w-4 h-4" />
+        </Button>
+      </div>
+    </Card>
+  );
+}
\ No newline at end of file
diff --git a/src/app/admin/users/components/UserDialog.tsx b/src/app/admin/users/components/UserDialog.tsx
new file mode 100644
index 0000000..f6deffe
--- /dev/null
+++ b/src/app/admin/users/components/UserDialog.tsx
@@ -0,0 +1,430 @@
+// src/app/admin/users/components/UserDialog.tsx
+'use client';
+
+import { useState, useEffect } from 'react';
+import { X, Loader2, Store as StoreIcon } from 'lucide-react';
+import {
+  Dialog,
+  DialogContent,
+  DialogDescription,
+  DialogHeader,
+  DialogTitle,
+} from '@/components/ui/dialog';
+import { Button } from '@/components/ui/button';
+import { Input } from '@/components/ui/input';
+import { Label } from '@/components/ui/label';
+import {
+  Select,
+  SelectContent,
+  SelectItem,
+  SelectTrigger,
+  SelectValue,
+} from '@/components/ui/select';
+import { Checkbox } from '@/components/ui/checkbox';
+import { Badge } from '@/components/ui/badge';
+import api from '@/lib/api';
+import type { User, Store } from '@/types';
+
+interface UserDialogProps {
+  user: User | null;
+  stores: Store[];
+  isOpen: boolean;
+  onClose: () => void;
+  onSave: () => void;
+  isCreating: boolean;
+}
+
+export function UserDialog({
+  user,
+  stores,
+  isOpen,
+  onClose,
+  onSave,
+  isCreating,
+}: UserDialogProps) {
+  const [formData, setFormData] = useState({
+    firstName: '',
+    lastName: '',
+    email: '',
+    phone: '',
+    role: 'user' as User['role'],
+    assignedVenues: [] as string[],
+    password: '',
+    confirmPassword: '',
+  });
+  const [saving, setSaving] = useState(false);
+  const [error, setError] = useState('');
+
+  // Initialize form data
+  useEffect(() => {
+    if (user) {
+      setFormData({
+        firstName: user.firstName || '',
+        lastName: user.lastName || '',
+        email: user.email || '',
+        phone: user.phone || '',
+        role: user.role || 'user',
+        assignedVenues: user.assignedVenues || [],
+        password: '',
+        confirmPassword: '',
+      });
+    } else {
+      setFormData({
+        firstName: '',
+        lastName: '',
+        email: '',
+        phone: '',
+        role: 'user',
+        assignedVenues: [],
+        password: '',
+        confirmPassword: '',
+      });
+    }
+    setError('');
+  }, [user, isOpen]);
+
+  const handleChange = (field: string, value: any) => {
+    setFormData((prev) => ({ ...prev, [field]: value }));
+    setError('');
+  };
+
+  const handleVenueToggle = (storeId: string) => {
+    setFormData((prev) => ({
+      ...prev,
+      assignedVenues: prev.assignedVenues.includes(storeId)
+        ? prev.assignedVenues.filter((id) => id !== storeId)
+        : [...prev.assignedVenues, storeId],
+    }));
+  };
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    setError('');
+
+    // Validation
+    if (!formData.firstName || !formData.lastName) {
+      setError('First and last name are required');
+      return;
+    }
+
+    if (!formData.email || !formData.email.includes('@')) {
+      setError('Valid email is required');
+      return;
+    }
+
+    if (isCreating) {
+      if (!formData.password || formData.password.length < 6) {
+        setError('Password must be at least 6 characters');
+        return;
+      }
+
+      if (formData.password !== formData.confirmPassword) {
+        setError('Passwords do not match');
+        return;
+      }
+    }
+
+    // Role-specific validation
+    if (
+      ['venue_manager', 'venue_staff'].includes(formData.role) &&
+      formData.assignedVenues.length === 0
+    ) {
+      setError(`${formData.role === 'venue_manager' ? 'Venue managers' : 'Venue staff'} must be assigned to at least one venue`);
+      return;
+    }
+
+    if (
+      ['user', 'gambino_ops', 'super_admin'].includes(formData.role) &&
+      formData.assignedVenues.length > 0
+    ) {
+      // Clear venues for roles that don't use them
+      formData.assignedVenues = [];
+    }
+
+    try {
+      setSaving(true);
+
+      if (isCreating) {
+        // Create new user
+        await api.post('/api/admin/users', {
+          firstName: formData.firstName,
+          lastName: formData.lastName,
+          email: formData.email.toLowerCase().trim(),
+          phone: formData.phone,
+          role: formData.role,
+          assignedVenues: formData.assignedVenues,
+          password: formData.password,
+        });
+      } else {
+        // Update existing user - Backend uses PUT, not PATCH!
+        const userId = user?._id || user?.id;
+        await api.put(`/api/admin/users/${userId}`, {
+          firstName: formData.firstName,
+          lastName: formData.lastName,
+          email: formData.email.toLowerCase().trim(),
+          phone: formData.phone,
+          role: formData.role,
+          assignedVenues: formData.assignedVenues,
+        });
+      }
+
+      onSave();
+    } catch (err: any) {
+      console.error('Save user error:', err);
+      setError(
+        err.response?.data?.error || `Failed to ${isCreating ? 'create' : 'update'} user`
+      );
+    } finally {
+      setSaving(false);
+    }
+  };
+
+  const getRoleDescription = (role: string) => {
+    const descriptions: Record<string, string> = {
+      super_admin: 'Full system access and control',
+      gambino_ops: 'Operations access to all venues',
+      venue_manager: 'Manage assigned venues and their staff',
+      venue_staff: 'Access assigned venues (read-only)',
+      user: 'Regular player account',
+    };
+    return descriptions[role] || '';
+  };
+
+  const requiresVenues = ['venue_manager', 'venue_staff'].includes(formData.role);
+  const canHaveVenues = requiresVenues;
+
+  return (
+    <Dialog open={isOpen} onOpenChange={onClose}>
+      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
+        <DialogHeader>
+          <DialogTitle>
+            {isCreating ? 'Create New User' : 'Edit User'}
+          </DialogTitle>
+          <DialogDescription>
+            {isCreating
+              ? 'Add a new user to the system with appropriate role and permissions'
+              : 'Update user information, role, and venue assignments'}
+          </DialogDescription>
+        </DialogHeader>
+
+        <form onSubmit={handleSubmit} className="space-y-6">
+          {/* Error Message */}
+          {error && (
+            <div className="bg-red-500/10 border border-red-500/20 rounded-lg p-3 text-red-400 text-sm">
+              {error}
+            </div>
+          )}
+
+          {/* Basic Information */}
+          <div className="space-y-4">
+            <h3 className="font-medium">Basic Information</h3>
+
+            <div className="grid grid-cols-2 gap-4">
+              <div className="space-y-2">
+                <Label htmlFor="firstName">
+                  First Name <span className="text-red-400">*</span>
+                </Label>
+                <Input
+                  id="firstName"
+                  value={formData.firstName}
+                  onChange={(e) => handleChange('firstName', e.target.value)}
+                  placeholder="John"
+                  required
+                />
+              </div>
+
+              <div className="space-y-2">
+                <Label htmlFor="lastName">
+                  Last Name <span className="text-red-400">*</span>
+                </Label>
+                <Input
+                  id="lastName"
+                  value={formData.lastName}
+                  onChange={(e) => handleChange('lastName', e.target.value)}
+                  placeholder="Doe"
+                  required
+                />
+              </div>
+            </div>
+
+            <div className="space-y-2">
+              <Label htmlFor="email">
+                Email <span className="text-red-400">*</span>
+              </Label>
+              <Input
+                id="email"
+                type="email"
+                value={formData.email}
+                onChange={(e) => handleChange('email', e.target.value)}
+                placeholder="john.doe@example.com"
+                required
+              />
+            </div>
+
+            <div className="space-y-2">
+              <Label htmlFor="phone">Phone (Optional)</Label>
+              <Input
+                id="phone"
+                type="tel"
+                value={formData.phone}
+                onChange={(e) => handleChange('phone', e.target.value)}
+                placeholder="+1 (555) 123-4567"
+              />
+            </div>
+          </div>
+
+          {/* Password (Create Only) */}
+          {isCreating && (
+            <div className="space-y-4">
+              <h3 className="font-medium">Security</h3>
+
+              <div className="space-y-2">
+                <Label htmlFor="password">
+                  Password <span className="text-red-400">*</span>
+                </Label>
+                <Input
+                  id="password"
+                  type="password"
+                  value={formData.password}
+                  onChange={(e) => handleChange('password', e.target.value)}
+                  placeholder="Minimum 6 characters"
+                  required
+                />
+              </div>
+
+              <div className="space-y-2">
+                <Label htmlFor="confirmPassword">
+                  Confirm Password <span className="text-red-400">*</span>
+                </Label>
+                <Input
+                  id="confirmPassword"
+                  type="password"
+                  value={formData.confirmPassword}
+                  onChange={(e) =>
+                    handleChange('confirmPassword', e.target.value)
+                  }
+                  placeholder="Re-enter password"
+                  required
+                />
+              </div>
+            </div>
+          )}
+
+          {/* Role Selection */}
+          <div className="space-y-4">
+            <h3 className="font-medium">Role & Permissions</h3>
+
+            <div className="space-y-2">
+              <Label htmlFor="role">
+                Role <span className="text-red-400">*</span>
+              </Label>
+              <Select
+                value={formData.role}
+                onValueChange={(value) =>
+                  handleChange('role', value as User['role'])
+                }
+              >
+                <SelectTrigger>
+                  <SelectValue />
+                </SelectTrigger>
+                <SelectContent>
+                  <SelectItem value="user">Player</SelectItem>
+                  <SelectItem value="venue_staff">Venue Staff</SelectItem>
+                  <SelectItem value="venue_manager">Venue Manager</SelectItem>
+                  <SelectItem value="gambino_ops">Operations</SelectItem>
+                  <SelectItem value="super_admin">Super Admin</SelectItem>
+                </SelectContent>
+              </Select>
+              <p className="text-sm text-gray-400">
+                {getRoleDescription(formData.role)}
+              </p>
+            </div>
+          </div>
+
+          {/* Venue Assignment */}
+          {canHaveVenues && (
+            <div className="space-y-4">
+              <div className="flex items-center justify-between">
+                <h3 className="font-medium">
+                  Venue Assignment {requiresVenues && <span className="text-red-400">*</span>}
+                </h3>
+                <Badge variant="outline">
+                  {formData.assignedVenues.length} selected
+                </Badge>
+              </div>
+
+              {stores.length === 0 ? (
+                <div className="text-sm text-gray-400 text-center py-4 border border-dashed border-gray-700 rounded-lg">
+                  No venues available
+                </div>
+              ) : (
+                <div className="border border-gray-700 rounded-lg divide-y divide-gray-700 max-h-60 overflow-y-auto">
+                  {stores.map((store) => (
+                    <label
+                      key={store.storeId}
+                      className="flex items-center gap-3 p-3 hover:bg-gray-800/50 cursor-pointer transition-colors"
+                    >
+                      <Checkbox
+                        checked={formData.assignedVenues.includes(
+                          store.storeId
+                        )}
+                        onCheckedChange={() =>
+                          handleVenueToggle(store.storeId)
+                        }
+                      />
+                      <StoreIcon className="w-4 h-4 text-gray-400" />
+                      <div className="flex-1">
+                        <div className="font-medium">{store.storeName}</div>
+                        <div className="text-sm text-gray-400">
+                          {store.city}, {store.state}
+                        </div>
+                      </div>
+                      <Badge
+                        variant="outline"
+                        className={
+                          store.status === 'active'
+                            ? 'bg-green-500/10 text-green-400 border-green-500/20'
+                            : 'bg-gray-500/10 text-gray-400 border-gray-500/20'
+                        }
+                      >
+                        {store.status}
+                      </Badge>
+                    </label>
+                  ))}
+                </div>
+              )}
+
+              {requiresVenues && formData.assignedVenues.length === 0 && (
+                <p className="text-sm text-yellow-400">
+                  ⚠️ This role requires at least one venue assignment
+                </p>
+              )}
+            </div>
+          )}
+
+          {/* Actions */}
+          <div className="flex items-center justify-end gap-3 pt-4 border-t border-gray-700">
+            <Button
+              type="button"
+              variant="outline"
+              onClick={onClose}
+              disabled={saving}
+            >
+              Cancel
+            </Button>
+            <Button type="submit" disabled={saving}>
+              {saving ? (
+                <>
+                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
+                  Saving...
+                </>
+              ) : (
+                <>{isCreating ? 'Create User' : 'Save Changes'}</>
+              )}
+            </Button>
+          </div>
+        </form>
+      </DialogContent>
+    </Dialog>
+  );
+}
\ No newline at end of file
diff --git a/src/app/admin/users/page.tsx b/src/app/admin/users/page.tsx
new file mode 100644
index 0000000..20fa280
--- /dev/null
+++ b/src/app/admin/users/page.tsx
@@ -0,0 +1,681 @@
+// src/app/admin/users/page.tsx
+'use client';
+
+import { useState, useEffect, useMemo } from 'react';
+import { useRouter } from 'next/navigation';
+import {
+  Search,
+  UserPlus,
+  Filter,
+  MoreVertical,
+  Edit,
+  Trash2,
+  CheckCircle2,
+  XCircle,
+  Download,
+  Mail,
+  Shield,
+  Store as StoreIcon,
+  ChevronDown,
+  RefreshCw,
+} from 'lucide-react';
+import AdminLayout from '@/components/layout/AdminLayout';
+import { Button } from '@/components/ui/button';
+import { Input } from '@/components/ui/input';
+import { Badge } from '@/components/ui/badge';
+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
+import {
+  Table,
+  TableBody,
+  TableCell,
+  TableHead,
+  TableHeader,
+  TableRow,
+} from '@/components/ui/table';
+import {
+  DropdownMenu,
+  DropdownMenuContent,
+  DropdownMenuItem,
+  DropdownMenuLabel,
+  DropdownMenuSeparator,
+  DropdownMenuTrigger,
+} from '@/components/ui/dropdown-menu';
+import {
+  Select,
+  SelectContent,
+  SelectItem,
+  SelectTrigger,
+  SelectValue,
+} from '@/components/ui/select';
+import { Checkbox } from '@/components/ui/checkbox';
+import api from '@/lib/api';
+import { getUser } from '@/lib/auth';
+import type { User, Store } from '@/types';
+import { UserDialog } from './components/UserDialog';
+import { BulkActionsBar } from './components/BulkActionsBar';
+
+export default function UsersPage() {
+  const router = useRouter();
+  const [currentUser, setCurrentUser] = useState<User | null>(null);
+
+  // State
+  const [users, setUsers] = useState<User[]>([]);
+  const [stores, setStores] = useState<Store[]>([]);
+  const [loading, setLoading] = useState(true);
+  const [searchTerm, setSearchTerm] = useState('');
+  const [roleFilter, setRoleFilter] = useState<string>('all');
+  const [statusFilter, setStatusFilter] = useState<string>('all');
+  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);
+  const [editingUser, setEditingUser] = useState<User | null>(null);
+  const [showUserDialog, setShowUserDialog] = useState(false);
+  const [isCreating, setIsCreating] = useState(false);
+
+  // Load current user client-side only to avoid hydration issues
+  useEffect(() => {
+    setCurrentUser(getUser());
+  }, []);
+
+  // Load data
+  useEffect(() => {
+    loadUsers();
+    loadStores();
+  }, []);
+
+  const loadUsers = async () => {
+    try {
+      setLoading(true);
+      const { data } = await api.get('/api/admin/users');
+      setUsers(data.users || []);
+    } catch (err) {
+      console.error('Failed to load users:', err);
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  const loadStores = async () => {
+    try {
+      const { data } = await api.get('/api/admin/stores');
+      setStores(data.stores || []);
+    } catch (err) {
+      console.error('Failed to load stores:', err);
+    }
+  };
+
+  // Filtered users
+  const filteredUsers = useMemo(() => {
+    return users.filter((user) => {
+      const matchesSearch =
+        user.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
+        user.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
+        user.lastName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
+        false;
+
+      const matchesRole = roleFilter === 'all' || user.role === roleFilter;
+      const matchesStatus =
+        statusFilter === 'all' ||
+        (statusFilter === 'active' && user.isActive !== false) ||
+        (statusFilter === 'inactive' && user.isActive === false);
+
+      return matchesSearch && matchesRole && matchesStatus;
+    });
+  }, [users, searchTerm, roleFilter, statusFilter]);
+
+  // Statistics
+  const stats = useMemo(() => {
+    return {
+      total: users.length,
+      active: users.filter((u) => u.isActive !== false).length,
+      admins: users.filter((u) =>
+        ['super_admin', 'gambino_ops'].includes(u.role)
+      ).length,
+      venueManagers: users.filter((u) => u.role === 'venue_manager').length,
+      venueStaff: users.filter((u) => u.role === 'venue_staff').length,
+      players: users.filter((u) => u.role === 'user').length,
+    };
+  }, [users]);
+
+  // Handlers
+  const handleCreateUser = () => {
+    setEditingUser(null);
+    setIsCreating(true);
+    setShowUserDialog(true);
+  };
+
+  const handleEditUser = (user: User) => {
+    setEditingUser(user);
+    setIsCreating(false);
+    setShowUserDialog(true);
+  };
+
+  const handleDeleteUser = async (userId: string) => {
+    if (!confirm('Are you sure you want to delete this user?')) return;
+
+    try {
+      await api.delete(`/api/admin/users/${userId}`);
+      setUsers(users.filter((u) => {
+        const uId = u._id || u.id;
+        return uId !== userId;
+      }));
+    } catch (err) {
+      console.error('Failed to delete user:', err);
+      alert('Failed to delete user');
+    }
+  };
+
+  const handleToggleStatus = async (user: User) => {
+    const userId = user._id || user.id;
+    if (!userId) return;
+
+    try {
+      // Backend uses PUT, not PATCH
+      await api.put(`/api/admin/users/${userId}`, {
+        isActive: !(user.isActive !== false),
+      });
+      setUsers(
+        users.map((u) => {
+          const uId = u._id || u.id;
+          return uId === userId
+            ? { ...u, isActive: !(user.isActive !== false) }
+            : u;
+        })
+      );
+    } catch (err) {
+      console.error('Failed to toggle user status:', err);
+      alert('Failed to update user status');
+    }
+  };
+
+  const handleSelectAll = () => {
+    if (selectedUsers.length === filteredUsers.length) {
+      setSelectedUsers([]);
+    } else {
+      setSelectedUsers(
+        filteredUsers
+          .map((u) => u._id || u.id)
+          .filter((id): id is string => !!id)
+      );
+    }
+  };
+
+  const handleSelectUser = (userId: string) => {
+    setSelectedUsers((prev) =>
+      prev.includes(userId)
+        ? prev.filter((id) => id !== userId)
+        : [...prev, userId]
+    );
+  };
+
+  const handleBulkAction = async (action: string) => {
+    if (selectedUsers.length === 0) return;
+
+    try {
+      if (action === 'activate') {
+        await api.post('/api/admin/users/bulk-activate', {
+          userIds: selectedUsers,
+        });
+        setUsers(
+          users.map((u) => {
+            const uId = u._id || u.id;
+            return uId && selectedUsers.includes(uId) 
+              ? { ...u, isActive: true } 
+              : u;
+          })
+        );
+      } else if (action === 'deactivate') {
+        await api.post('/api/admin/users/bulk-deactivate', {
+          userIds: selectedUsers,
+        });
+        setUsers(
+          users.map((u) => {
+            const uId = u._id || u.id;
+            return uId && selectedUsers.includes(uId)
+              ? { ...u, isActive: false }
+              : u;
+          })
+        );
+      } else if (action === 'delete') {
+        if (!confirm(`Delete ${selectedUsers.length} users?`)) return;
+        await api.post('/api/admin/users/bulk-delete', {
+          userIds: selectedUsers,
+        });
+        setUsers(
+          users.filter((u) => {
+            const uId = u._id || u.id;
+            return !uId || !selectedUsers.includes(uId);
+          })
+        );
+      }
+
+      setSelectedUsers([]);
+    } catch (err) {
+      console.error('Bulk action failed:', err);
+      alert('Failed to perform bulk action');
+    }
+  };
+
+  const handleExport = () => {
+    const csv = [
+      ['Name', 'Email', 'Role', 'Status', 'Venues', 'Created'].join(','),
+      ...filteredUsers.map((u) =>
+        [
+          `"${u.firstName || ''} ${u.lastName || ''}"`,
+          u.email || '',
+          u.role || 'user',
+          u.isActive !== false ? 'Active' : 'Inactive',
+          u.assignedVenues?.length || 0,
+          u.createdAt ? new Date(u.createdAt).toLocaleDateString() : 'N/A',
+        ].join(',')
+      ),
+    ].join('\n');
+
+    const blob = new Blob([csv], { type: 'text/csv' });
+    const url = window.URL.createObjectURL(blob);
+    const a = document.createElement('a');
+    a.href = url;
+    a.download = `users-${new Date().toISOString().split('T')[0]}.csv`;
+    a.click();
+  };
+
+  // Helper functions
+  const getRoleBadgeColor = (role: string) => {
+    const colors: Record<string, string> = {
+      super_admin: 'bg-purple-500/10 text-purple-400 border-purple-500/20',
+      gambino_ops: 'bg-blue-500/10 text-blue-400 border-blue-500/20',
+      venue_manager: 'bg-green-500/10 text-green-400 border-green-500/20',
+      venue_staff: 'bg-yellow-500/10 text-yellow-400 border-yellow-500/20',
+      user: 'bg-gray-500/10 text-gray-400 border-gray-500/20',
+    };
+    return colors[role] || colors.user;
+  };
+
+  const getRoleLabel = (role: string) => {
+    const labels: Record<string, string> = {
+      super_admin: 'Super Admin',
+      gambino_ops: 'Operations',
+      venue_manager: 'Venue Manager',
+      venue_staff: 'Venue Staff',
+      user: 'Player',
+    };
+    return labels[role] || role;
+  };
+
+  const formatDate = (date: string | Date) => {
+    return new Date(date).toLocaleDateString('en-US', {
+      year: 'numeric',
+      month: 'short',
+      day: 'numeric',
+    });
+  };
+
+  if (loading) {
+    return (
+      <AdminLayout user={currentUser}>
+        <div className="flex items-center justify-center h-screen">
+          <RefreshCw className="w-8 h-8 animate-spin text-gray-400" />
+        </div>
+      </AdminLayout>
+    );
+  }
+
+  return (
+    <AdminLayout user={currentUser}>
+      <div className="p-8 space-y-6">
+        {/* Header */}
+        <div className="flex items-center justify-between">
+          <div>
+            <h1 className="text-3xl font-bold">Users Management</h1>
+            <p className="text-gray-400 mt-1">
+              Manage user accounts, roles, and venue access
+            </p>
+          </div>
+          <div className="flex items-center gap-3">
+            <Button
+              variant="outline"
+              onClick={loadUsers}
+              className="gap-2"
+            >
+              <RefreshCw className="w-4 h-4" />
+              Refresh
+            </Button>
+            <Button
+              variant="outline"
+              onClick={handleExport}
+              className="gap-2"
+            >
+              <Download className="w-4 h-4" />
+              Export
+            </Button>
+            <Button onClick={handleCreateUser} className="gap-2">
+              <UserPlus className="w-4 h-4" />
+              Create User
+            </Button>
+          </div>
+        </div>
+
+        {/* Stats Cards */}
+        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4">
+          <Card>
+            <CardHeader className="pb-3">
+              <CardTitle className="text-sm font-medium text-gray-400">
+                Total Users
+              </CardTitle>
+            </CardHeader>
+            <CardContent>
+              <div className="text-2xl font-bold">{stats.total}</div>
+            </CardContent>
+          </Card>
+
+          <Card>
+            <CardHeader className="pb-3">
+              <CardTitle className="text-sm font-medium text-gray-400">
+                Active
+              </CardTitle>
+            </CardHeader>
+            <CardContent>
+              <div className="text-2xl font-bold text-green-400">
+                {stats.active}
+              </div>
+            </CardContent>
+          </Card>
+
+          <Card>
+            <CardHeader className="pb-3">
+              <CardTitle className="text-sm font-medium text-gray-400">
+                Admins
+              </CardTitle>
+            </CardHeader>
+            <CardContent>
+              <div className="text-2xl font-bold text-purple-400">
+                {stats.admins}
+              </div>
+            </CardContent>
+          </Card>
+
+          <Card>
+            <CardHeader className="pb-3">
+              <CardTitle className="text-sm font-medium text-gray-400">
+                Managers
+              </CardTitle>
+            </CardHeader>
+            <CardContent>
+              <div className="text-2xl font-bold text-blue-400">
+                {stats.venueManagers}
+              </div>
+            </CardContent>
+          </Card>
+
+          <Card>
+            <CardHeader className="pb-3">
+              <CardTitle className="text-sm font-medium text-gray-400">
+                Staff
+              </CardTitle>
+            </CardHeader>
+            <CardContent>
+              <div className="text-2xl font-bold text-yellow-400">
+                {stats.venueStaff}
+              </div>
+            </CardContent>
+          </Card>
+
+          <Card>
+            <CardHeader className="pb-3">
+              <CardTitle className="text-sm font-medium text-gray-400">
+                Players
+              </CardTitle>
+            </CardHeader>
+            <CardContent>
+              <div className="text-2xl font-bold text-gray-400">
+                {stats.players}
+              </div>
+            </CardContent>
+          </Card>
+        </div>
+
+        {/* Filters */}
+        <Card>
+          <CardContent className="pt-6">
+            <div className="flex flex-col md:flex-row gap-4">
+              <div className="flex-1 relative">
+                <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
+                <Input
+                  placeholder="Search by name or email..."
+                  value={searchTerm}
+                  onChange={(e) => setSearchTerm(e.target.value)}
+                  className="pl-10"
+                />
+              </div>
+
+              <Select value={roleFilter} onValueChange={setRoleFilter}>
+                <SelectTrigger className="w-[200px]">
+                  <SelectValue placeholder="Filter by role" />
+                </SelectTrigger>
+                <SelectContent>
+                  <SelectItem value="all">All Roles</SelectItem>
+                  <SelectItem value="super_admin">Super Admin</SelectItem>
+                  <SelectItem value="gambino_ops">Operations</SelectItem>
+                  <SelectItem value="venue_manager">Venue Manager</SelectItem>
+                  <SelectItem value="venue_staff">Venue Staff</SelectItem>
+                  <SelectItem value="user">Player</SelectItem>
+                </SelectContent>
+              </Select>
+
+              <Select value={statusFilter} onValueChange={setStatusFilter}>
+                <SelectTrigger className="w-[200px]">
+                  <SelectValue placeholder="Filter by status" />
+                </SelectTrigger>
+                <SelectContent>
+                  <SelectItem value="all">All Status</SelectItem>
+                  <SelectItem value="active">Active</SelectItem>
+                  <SelectItem value="inactive">Inactive</SelectItem>
+                </SelectContent>
+              </Select>
+            </div>
+          </CardContent>
+        </Card>
+
+        {/* Bulk Actions Bar */}
+        {selectedUsers.length > 0 && (
+          <BulkActionsBar
+            selectedCount={selectedUsers.length}
+            onAction={handleBulkAction}
+            onClear={() => setSelectedUsers([])}
+          />
+        )}
+
+        {/* Users Table */}
+        <Card>
+          <CardContent className="p-0">
+            <Table>
+              <TableHeader>
+                <TableRow>
+                  <TableHead className="w-12">
+                    <Checkbox
+                      checked={
+                        selectedUsers.length === filteredUsers.length &&
+                        filteredUsers.length > 0
+                      }
+                      onCheckedChange={handleSelectAll}
+                    />
+                  </TableHead>
+                  <TableHead>User</TableHead>
+                  <TableHead>Role</TableHead>
+                  <TableHead>Status</TableHead>
+                  <TableHead>Venues</TableHead>
+                  <TableHead>Balance</TableHead>
+                  <TableHead>Created</TableHead>
+                  <TableHead className="w-12"></TableHead>
+                </TableRow>
+              </TableHeader>
+              <TableBody>
+                {filteredUsers.length === 0 ? (
+                  <TableRow>
+                    <TableCell colSpan={8} className="text-center py-8">
+                      <div className="text-gray-400">
+                        No users found matching your filters
+                      </div>
+                    </TableCell>
+                  </TableRow>
+                ) : (
+                  filteredUsers.map((user) => {
+                    const userId = user._id || user.id || '';
+                    return (
+                      <TableRow key={userId}>
+                        <TableCell>
+                          <Checkbox
+                            checked={selectedUsers.includes(userId)}
+                            onCheckedChange={() => handleSelectUser(userId)}
+                          />
+                        </TableCell>
+                        <TableCell>
+                          <div className="flex items-center gap-3">
+                            <div className="w-8 h-8 rounded-full bg-gradient-to-br from-purple-500 to-blue-500 flex items-center justify-center text-white text-sm font-medium">
+                              {user.firstName?.charAt(0) || ''}
+                              {user.lastName?.charAt(0) || ''}
+                            </div>
+                            <div>
+                              <div className="font-medium">
+                                {user.firstName || ''} {user.lastName || ''}
+                              </div>
+                              <div className="text-sm text-gray-400">
+                                {user.email}
+                              </div>
+                            </div>
+                          </div>
+                        </TableCell>
+                        <TableCell>
+                          <Badge
+                            variant="outline"
+                            className={getRoleBadgeColor(user.role)}
+                          >
+                            {getRoleLabel(user.role)}
+                          </Badge>
+                        </TableCell>
+                        <TableCell>
+                          {user.isActive !== false ? (
+                            <Badge
+                              variant="outline"
+                              className="bg-green-500/10 text-green-400 border-green-500/20"
+                            >
+                              <CheckCircle2 className="w-3 h-3 mr-1" />
+                              Active
+                            </Badge>
+                          ) : (
+                            <Badge
+                              variant="outline"
+                              className="bg-gray-500/10 text-gray-400 border-gray-500/20"
+                            >
+                              <XCircle className="w-3 h-3 mr-1" />
+                              Inactive
+                            </Badge>
+                          )}
+                        </TableCell>
+                        <TableCell>
+                          {user.assignedVenues && user.assignedVenues.length > 0 ? (
+                            <div className="flex items-center gap-1 text-sm">
+                              <StoreIcon className="w-3 h-3 text-gray-400" />
+                              <span>{user.assignedVenues.length} venues</span>
+                            </div>
+                          ) : (
+                            <span className="text-gray-500 text-sm">—</span>
+                          )}
+                        </TableCell>
+                        <TableCell>
+                          <div className="font-mono text-sm">
+                            {(
+                              user.cachedGambinoBalance ||
+                              user.gambinoBalance ||
+                              0
+                            ).toLocaleString()}{' '}
+                            <span className="text-gray-500">GG</span>
+                          </div>
+                        </TableCell>
+                        <TableCell className="text-sm text-gray-400">
+                          {user.createdAt ? formatDate(user.createdAt) : '—'}
+                        </TableCell>
+                        <TableCell>
+                          <DropdownMenu>
+                            <DropdownMenuTrigger asChild>
+                              <Button variant="ghost" size="sm">
+                                <MoreVertical className="w-4 h-4" />
+                              </Button>
+                            </DropdownMenuTrigger>
+                            <DropdownMenuContent align="end">
+                              <DropdownMenuLabel>Actions</DropdownMenuLabel>
+                              <DropdownMenuSeparator />
+                              <DropdownMenuItem
+                                onClick={() => handleEditUser(user)}
+                              >
+                                <Edit className="w-4 h-4 mr-2" />
+                                Edit User
+                              </DropdownMenuItem>
+                              <DropdownMenuItem
+                                onClick={() => handleToggleStatus(user)}
+                              >
+                                {user.isActive !== false ? (
+                                  <>
+                                    <XCircle className="w-4 h-4 mr-2" />
+                                    Deactivate
+                                  </>
+                                ) : (
+                                  <>
+                                    <CheckCircle2 className="w-4 h-4 mr-2" />
+                                    Activate
+                                  </>
+                                )}
+                              </DropdownMenuItem>
+                              <DropdownMenuItem
+                                onClick={() =>
+                                  window.open(`mailto:${user.email}`)
+                                }
+                              >
+                                <Mail className="w-4 h-4 mr-2" />
+                                Send Email
+                              </DropdownMenuItem>
+                              <DropdownMenuSeparator />
+                              <DropdownMenuItem
+                                onClick={() => handleDeleteUser(userId)}
+                                className="text-red-400"
+                              >
+                                <Trash2 className="w-4 h-4 mr-2" />
+                                Delete User
+                              </DropdownMenuItem>
+                            </DropdownMenuContent>
+                          </DropdownMenu>
+                        </TableCell>
+                      </TableRow>
+                    );
+                  })
+                )}
+              </TableBody>
+            </Table>
+          </CardContent>
+        </Card>
+
+        {/* Results Summary */}
+        <div className="text-sm text-gray-400 text-center">
+          Showing {filteredUsers.length} of {users.length} users
+        </div>
+      </div>
+
+      {/* User Dialog */}
+      {showUserDialog && (
+        <UserDialog
+          user={editingUser}
+          stores={stores}
+          isOpen={showUserDialog}
+          onClose={() => {
+            setShowUserDialog(false);
+            setEditingUser(null);
+          }}
+          onSave={() => {
+            loadUsers();
+            setShowUserDialog(false);
+            setEditingUser(null);
+          }}
+          isCreating={isCreating}
+        />
+      )}
+    </AdminLayout>
+  );
+}
\ No newline at end of file
diff --git a/src/app/globals.css b/src/app/globals.css
index 9711daf..7552b18 100644
--- a/src/app/globals.css
+++ b/src/app/globals.css
@@ -1,122 +1,54 @@
 @import "tailwindcss";
-@import "tw-animate-css";
-
-@custom-variant dark (&:is(.dark *));
-
-@theme inline {
-  --color-background: var(--background);
-  --color-foreground: var(--foreground);
-  --font-sans: var(--font-geist-sans);
-  --font-mono: var(--font-geist-mono);
-  --color-sidebar-ring: var(--sidebar-ring);
-  --color-sidebar-border: var(--sidebar-border);
-  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
-  --color-sidebar-accent: var(--sidebar-accent);
-  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
-  --color-sidebar-primary: var(--sidebar-primary);
-  --color-sidebar-foreground: var(--sidebar-foreground);
-  --color-sidebar: var(--sidebar);
-  --color-chart-5: var(--chart-5);
-  --color-chart-4: var(--chart-4);
-  --color-chart-3: var(--chart-3);
-  --color-chart-2: var(--chart-2);
-  --color-chart-1: var(--chart-1);
-  --color-ring: var(--ring);
-  --color-input: var(--input);
-  --color-border: var(--border);
-  --color-destructive: var(--destructive);
-  --color-accent-foreground: var(--accent-foreground);
-  --color-accent: var(--accent);
-  --color-muted-foreground: var(--muted-foreground);
-  --color-muted: var(--muted);
-  --color-secondary-foreground: var(--secondary-foreground);
-  --color-secondary: var(--secondary);
-  --color-primary-foreground: var(--primary-foreground);
-  --color-primary: var(--primary);
-  --color-popover-foreground: var(--popover-foreground);
-  --color-popover: var(--popover);
-  --color-card-foreground: var(--card-foreground);
-  --color-card: var(--card);
-  --radius-sm: calc(var(--radius) - 4px);
-  --radius-md: calc(var(--radius) - 2px);
-  --radius-lg: var(--radius);
-  --radius-xl: calc(var(--radius) + 4px);
-}
 
 :root {
-  --radius: 0.625rem;
-  --background: oklch(1 0 0);
-  --foreground: oklch(0.129 0.042 264.695);
-  --card: oklch(1 0 0);
-  --card-foreground: oklch(0.129 0.042 264.695);
-  --popover: oklch(1 0 0);
-  --popover-foreground: oklch(0.129 0.042 264.695);
-  --primary: oklch(0.208 0.042 265.755);
-  --primary-foreground: oklch(0.984 0.003 247.858);
-  --secondary: oklch(0.968 0.007 247.896);
-  --secondary-foreground: oklch(0.208 0.042 265.755);
-  --muted: oklch(0.968 0.007 247.896);
-  --muted-foreground: oklch(0.554 0.046 257.417);
-  --accent: oklch(0.968 0.007 247.896);
-  --accent-foreground: oklch(0.208 0.042 265.755);
-  --destructive: oklch(0.577 0.245 27.325);
-  --border: oklch(0.929 0.013 255.508);
-  --input: oklch(0.929 0.013 255.508);
-  --ring: oklch(0.704 0.04 256.788);
-  --chart-1: oklch(0.646 0.222 41.116);
-  --chart-2: oklch(0.6 0.118 184.704);
-  --chart-3: oklch(0.398 0.07 227.392);
-  --chart-4: oklch(0.828 0.189 84.429);
-  --chart-5: oklch(0.769 0.188 70.08);
-  --sidebar: oklch(0.984 0.003 247.858);
-  --sidebar-foreground: oklch(0.129 0.042 264.695);
-  --sidebar-primary: oklch(0.208 0.042 265.755);
-  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
-  --sidebar-accent: oklch(0.968 0.007 247.896);
-  --sidebar-accent-foreground: oklch(0.208 0.042 265.755);
-  --sidebar-border: oklch(0.929 0.013 255.508);
-  --sidebar-ring: oklch(0.704 0.04 256.788);
+  --background: 0 0% 100%;
+  --foreground: 20 14.3% 4.1%;
+  --card: 0 0% 100%;
+  --card-foreground: 20 14.3% 4.1%;
+  --popover: 0 0% 100%;
+  --popover-foreground: 20 14.3% 4.1%;
+  --primary: 48 96% 53%;
+  --primary-foreground: 26 83.3% 14.1%;
+  --secondary: 60 4.8% 95.9%;
+  --secondary-foreground: 24 9.8% 10%;
+  --muted: 60 4.8% 95.9%;
+  --muted-foreground: 25 5.3% 44.7%;
+  --accent: 60 4.8% 95.9%;
+  --accent-foreground: 24 9.8% 10%;
+  --destructive: 0 84.2% 60.2%;
+  --destructive-foreground: 60 9.1% 97.8%;
+  --border: 20 5.9% 90%;
+  --input: 20 5.9% 90%;
+  --ring: 48 96% 53%;
 }
 
 .dark {
-  --background: oklch(0.129 0.042 264.695);
-  --foreground: oklch(0.984 0.003 247.858);
-  --card: oklch(0.208 0.042 265.755);
-  --card-foreground: oklch(0.984 0.003 247.858);
-  --popover: oklch(0.208 0.042 265.755);
-  --popover-foreground: oklch(0.984 0.003 247.858);
-  --primary: oklch(0.929 0.013 255.508);
-  --primary-foreground: oklch(0.208 0.042 265.755);
-  --secondary: oklch(0.279 0.041 260.031);
-  --secondary-foreground: oklch(0.984 0.003 247.858);
-  --muted: oklch(0.279 0.041 260.031);
-  --muted-foreground: oklch(0.704 0.04 256.788);
-  --accent: oklch(0.279 0.041 260.031);
-  --accent-foreground: oklch(0.984 0.003 247.858);
-  --destructive: oklch(0.704 0.191 22.216);
-  --border: oklch(1 0 0 / 10%);
-  --input: oklch(1 0 0 / 15%);
-  --ring: oklch(0.551 0.027 264.364);
-  --chart-1: oklch(0.488 0.243 264.376);
-  --chart-2: oklch(0.696 0.17 162.48);
-  --chart-3: oklch(0.769 0.188 70.08);
-  --chart-4: oklch(0.627 0.265 303.9);
-  --chart-5: oklch(0.645 0.246 16.439);
-  --sidebar: oklch(0.208 0.042 265.755);
-  --sidebar-foreground: oklch(0.984 0.003 247.858);
-  --sidebar-primary: oklch(0.488 0.243 264.376);
-  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
-  --sidebar-accent: oklch(0.279 0.041 260.031);
-  --sidebar-accent-foreground: oklch(0.984 0.003 247.858);
-  --sidebar-border: oklch(1 0 0 / 10%);
-  --sidebar-ring: oklch(0.551 0.027 264.364);
+  --background: 20 14.3% 4.1%;
+  --foreground: 60 9.1% 97.8%;
+  --card: 20 14.3% 4.1%;
+  --card-foreground: 60 9.1% 97.8%;
+  --popover: 20 14.3% 4.1%;
+  --popover-foreground: 60 9.1% 97.8%;
+  --primary: 48 96% 53%;
+  --primary-foreground: 26 83.3% 14.1%;
+  --secondary: 12 6.5% 15.1%;
+  --secondary-foreground: 60 9.1% 97.8%;
+  --muted: 12 6.5% 15.1%;
+  --muted-foreground: 24 5.4% 63.9%;
+  --accent: 12 6.5% 15.1%;
+  --accent-foreground: 60 9.1% 97.8%;
+  --destructive: 0 62.8% 30.6%;
+  --destructive-foreground: 60 9.1% 97.8%;
+  --border: 12 6.5% 15.1%;
+  --input: 12 6.5% 15.1%;
+  --ring: 48 96% 53%;
 }
 
-@layer base {
-  * {
-    @apply border-border outline-ring/50;
-  }
-  body {
-    @apply bg-background text-foreground;
-  }
+* {
+  border-color: hsl(var(--border));
 }
+
+body {
+  background-color: hsl(var(--background));
+  color: hsl(var(--foreground));
+}
\ No newline at end of file
diff --git a/src/types/index.ts b/src/types/index.ts
index c84f04c..3877c88 100644
--- a/src/types/index.ts
+++ b/src/types/index.ts
@@ -6,8 +6,12 @@ export type MachineStatus = 'online' | 'offline' | 'maintenance' | 'error';
 
 export interface User {
   _id: string;
+  id?: string; // Alias for _id
   email: string;
   username?: string;
+  firstName?: string; // ✅ ADDED
+  lastName?: string;  // ✅ ADDED
+  phone?: string;     // ✅ ADDED
   role: UserRole;
   assignedVenues?: string[];
   permissions?: string[];
